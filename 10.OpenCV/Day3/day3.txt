1. inRange()
 - 이미지에서 지정된 범위 안에 픽셀을 선택해주는 함수이다.
        cv2.inRange(영상, min값, max값) : 해당 영상에서 인덱스값을 추출해준다.

2. copyTo()
 - 마스크 연산을 지원하는 픽셀 값 복사 함수
        cv2.copyTo(영상, 마스크, 출력영상=None)


문제(3_chromake.py)
woman.mp4와 특정 비디오파일을 이용하여 크로마키 프로그램을 만들어보자.
(단, woman.mp4 플레이중 스페이스바를 누르면 합성 되는)


3. 관심 영역(ROI, Region of Interest)
 - 영상 내에서 관심이 있는 영역
    cv2.selectROI(창이름, 영상, 중앙좌표여부)
    - 중앙 좌표 여부: True일 경우 선택한 ROI의 중앙 좌표로 계산한다.
    ( 기본값은 False, 왼쪽 상단 좌표로 계산한다.)

4. 영상의 이진화(Binarization)
 - 픽셀을 검은색 또는 흰색과 같이 두개의 값으로 나누는 작업
 - 영상에서 의미있는 관심 영역(ROI)과 비관심 영역으로 구분할 때 사용한다.
 - 배경과 객체를 나눌 때 사용한다.
 - 영상의 이진화 연산을 할 때 나누는 특정 값을 "임계값"이라고한다.
    cv2.threshold(영상, 임계값, 최대값, 플래그)
    - 플래그
        cv2.THRESH_BINARY : 픽셀값이 임계값을 넘으면 최대값으로 지정하고, 넘지 못하면 0으로 지정한다.
        cv2.THRESH_BINARY_INV : THRESH_BINARY의 반대로 셋팅된다.
        cv2.THRESH_TRUNC : 픽셀 값이 입계값을 넘으면 최대값으로 지정하고, 넘지 못하면 원래값을 유지한다.
        cv2.THRESH_TOZERO : 픽셀 값이 임계값을 넘으면 원래 값을 유지 넘지 못하면 0으로 지정
        cv2.THRESH_TOZERO_INV : THRESH_TOZERO의 반대로 셋팅된다.

5. 오츠의 이진화 알고리즘
 - 자동 이진화
 - 자동으로 임계값을 구하는 알고리즘. 임계값을 구분하는 가장 좋은 방법으로 많이 사용된다.
    cv2.threshold(영상, 임계값, 최대값, 플래그 | cv2.THRESH_OTSU)
 - 임계값을 임의로 정해 픽셀을 두 부류로 나누고, 두 부류의 명암 분포를 구하는 작업을 반복하여 모든 경우의 수 중에서
   두 부류의 명암 분포가 가장 균일 할 때의 임계값을 선택한다.(찾아준다)

6. 지역 이진화
 - 균일하지 않은 조명 환경에서 사용하는 이진화 방법
 - 전체 구역을 N등분하고 각각의 구역에 이진화를 한 뒤에 이어 붙이는 방법
 - 여러개의 임계값을 이용할 수 있음